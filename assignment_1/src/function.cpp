#include "ros/ros.h"
#include "move_base_msgs/MoveBaseActionGoal.h"
#include "move_base_msgs/MoveBaseActionResult.h"
#include <tf2/LinearMath/Quaternion.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <vector>
#include <iostream>
#include <math.h>
using namespace std;

//temporary structs for points, TODO: use PolarPoint class
struct Cpoint{
	double x, y;
};
struct Ppoint{
	double dist, angle;
};
struct pt3{
	Ppoint first, closer, last;
};

//constant global values
const double diameter = 0.4;
const double angle_min = -1.9198600053787231;
const double angle_max = 1.9198600053787231;
const double angle_increment = 0.005774015095084906;
const double distThr = 0.1;

//converts polar to cardinal
Cpoint PtoC(Ppoint p, bool dbg=false){
	Cpoint c;
	c.x = p.dist * cos(p.angle);
	c.y = p.dist * sin(p.angle);
	
	if(dbg){
		cout<<endl<<"conv"<<endl;
		cout<<"\t"<<p.dist<<" "<<p.angle<<endl;
		cout<<"\t"<<c.x<<" "<<c.y<<endl;
	}
	return c;
}

//compute distance in cardinal
double dist(Cpoint p1, Cpoint p2, bool dbg=false){
	if(dbg){
		cout<<endl<<"dist"<<endl;
		cout<<"\t"<<p1.x<<" "<<p1.y<<endl;
		cout<<"\t"<<p2.x<<" "<<p2.y<<endl;
		cout<<"\t"<<sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2))<<endl;
	}
	return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));
}

//main function that finds circles
vector<Cpoint> findCircles(vector<double> scan){
	
	//group points (memorize extremes and closer point)
	int n = (angle_max - angle_min) / angle_increment;
	vector<pt3> groups {};
	bool inAgroup = false;
	int firstEl = -1;
	Ppoint prev {scan[0], angle_min};
	Ppoint closer {9999, 0};
	for(int i=1;i<n;i++){
		Ppoint current {scan[i], angle_min+(i*angle_increment)};
		
		//find group border
		if(abs(prev.dist-current.dist) > distThr){
			
			//new group
			if(!inAgroup){
				
				if(firstEl == -1){
					firstEl = i-1;
				}
				
				inAgroup = true;
				
				pt3 newGroup;
				newGroup.first = current;
				closer = current;
				groups.push_back(newGroup);
			}
			
			//group finished
			else{
				
				inAgroup = false;
				
				groups[groups.size()-1].closer = closer;
				groups[groups.size()-1].last = prev;
				
				closer = current;
				i--;
				continue;
			}
		}
		
		//find closer point in a group
		else if(inAgroup){
			if(current.dist < closer.dist)
				closer = current;
		}
		
		prev = current;
	}
	
	//complete the last group
	if(inAgroup){
		Ppoint last {scan[firstEl], angle_min+(firstEl*angle_increment)};
		groups[groups.size()-1].last = last;
		for(int i=1;i<firstEl;i++){
			Ppoint current {scan[i], angle_min+(i*angle_increment)};
			
			if(current.dist < closer.dist)
				closer = current;
		}
		groups[groups.size()-1].closer = closer;
	}
	
	
	//filter circles
	for(int i=0, j=0;i<groups.size();i++, j++){
		
		//rule 1 = abs(dist(A,B) - diametro_cilindro) < tolleranza_diametro
		bool rule1 = abs(dist(PtoC(groups[i].first), PtoC(groups[i].last)) - diameter) <= 2*distThr;
		
		//rule 2 = abs(dist(A,C) - dist(B,C)) < tolleranza_isoscele
		bool rule2 = abs(dist(PtoC(groups[i].first), PtoC(groups[i].closer)) - dist(PtoC(groups[i].last), PtoC(groups[i].closer))) <= 0.5;
		
		if(!rule1 || !rule2){
			groups.erase(groups.begin()+i);
			i--;
		}else{
			//debug printing
			cout<<j<<" from:"<<groups[i].first.dist<<";"<<groups[i].first.angle
				<<" to:"<<groups[i].last.dist<<";"<<groups[i].last.angle
				<<" middle:"<<groups[i].closer.dist<<";"<<groups[i].closer.angle<<endl;
		}
	}
	
	
	//temporary check for number of circles
	if(groups.size() > 4)
		cout<<"To many matches! ("<<groups.size()<<")\n";
	else
		cerr<<"#matches: "<<groups.size()<<"\n";
	
	
	//compute circle center and return
	vector<Cpoint> centers (groups.size());
	for(int i=0;i<groups.size();i++){
		Ppoint current = groups[i].closer;
		current.dist += diameter/2;
		centers[i] = PtoC(current);
	}
	
	return centers;
}

int main(int argc, char **argv) {
	//hardcoded scan example
	vector<double> vect {0.11101821810007095, 0.11071385443210602, 0.11040981113910675, 0.1101062074303627, 0.10980314016342163, 0.10950066149234772, 0.10922402888536453, 0.10892304033041, 0.108649343252182, 0.10837666690349579, 0.10810496658086777, 0.1078343540430069, 0.10758934170007706, 0.10732104629278183, 0.10694977641105652, 0.1060660183429718, 0.10888302326202393, 0.10817772150039673, 0.10715844482183456, 0.09669497609138489, 1.5232279300689697, 1.5244836807250977, 1.5256818532943726, 1.5269465446472168, 1.5282803773880005, 1.529685616493225, 1.5311648845672607, 1.5325437784194946, 1.5341702699661255, 1.535684585571289, 1.5374680757522583, 1.539126992225647, 1.540857195854187, 1.5426610708236694, 1.5445410013198853, 1.5464997291564941, 1.548539161682129, 1.5503922700881958, 1.5525907278060913, 1.5548781156539917, 1.5569545030593872, 1.5594159364700317, 1.5616495609283447, 1.5639595985412598, 1.5663484334945679, 1.5688183307647705, 1.57137131690979, 1.5740102529525757, 1.5767371654510498, 1.579554796218872, 1.5824655294418335, 1.5854721069335938, 1.588127851486206, 1.5913199186325073, 1.594616174697876, 1.5975265502929688, 1.6005173921585083, 1.6041111946105957, 1.6072837114334106, 1.6105430126190186, 1.6144585609436035, 1.6179143190383911, 1.6214638948440552, 1.6251100301742554, 1.6288553476333618, 1.6327016353607178, 1.6366521120071411, 1.6407091617584229, 1.6448752880096436, 1.6484326124191284, 1.6528064012527466, 1.6572974920272827, 1.661908745765686, 1.665845513343811, 1.670685052871704, 1.6748167276382446, 1.6798958778381348, 1.6842315196990967, 1.6895612478256226, 1.694110631942749, 1.6997029781341553, 1.7044765949249268, 1.709355354309082, 1.7153525352478027, 1.7204711437225342, 1.7257030010223389, 1.731049656867981, 1.7365144491195679, 1.743231177330017, 1.7489639520645142, 1.7548233270645142, 1.760811448097229, 1.7669315338134766, 1.773186445236206, 1.7795789241790771, 1.7861123085021973, 1.7927895784378052, 1.7982372045516968, 1.805181622505188, 1.8122793436050415, 1.8195334672927856, 1.826947808265686, 1.8345258235931396, 1.8407084941864014, 1.848590612411499, 1.8566467761993408, 1.86322021484375, 1.8716003894805908, 1.8801664113998413, 1.8871556520462036, 1.8960669040679932, 1.905176043510437, 1.9126092195510864, 1.922086238861084, 1.9298200607299805, 1.939681053161621, 1.9477283954620361, 1.9579894542694092, 1.966363787651062, 1.977042317390442, 1.985757827758789, 1.996872067451477, 2.005943536758423, 2.017512559890747, 2.0269558429718018, 2.0365688800811768, 2.048830509185791, 2.0588395595550537, 2.0716071128845215, 2.0820298194885254, 2.092642068862915, 2.106180429458618, 2.117233991622925, 2.1284894943237305, 2.139951705932617, 2.154576301574707, 2.1665186882019043, 2.1786818504333496, 2.1910696029663086, 2.206878185272217, 2.219789743423462, 2.2329421043395996, 2.246340274810791, 2.2634410858154297, 2.277411460876465, 2.291644811630249, 2.3061468601226807, 2.3209238052368164, 2.339790105819702, 2.3552072048187256, 2.3709187507629395, 2.3869316577911377, 2.403252363204956, 2.4240968227386475, 2.441136360168457, 2.4585070610046387, 2.4762160778045654, 2.494271993637085, 2.5126826763153076, 2.531456232070923, 2.555446147918701, 2.5750677585601807, 2.595080852508545, 2.615495204925537, 2.636320114135742, 2.6575658321380615, 2.6792428493499756, 2.7069613933563232, 2.7296478748321533, 2.7528014183044434, 2.7764341831207275, 2.800558090209961, 2.825186014175415, 2.8503308296203613, 2.882509708404541, 2.9088683128356934, 2.9357895851135254, 2.9632887840270996, 2.991382360458374, 3.020085573196411, 3.0568480491638184, 3.086986780166626, 3.1177923679351807, 3.149284839630127, 3.1814827919006348, 3.214407205581665, 3.256617546081543, 3.2912557125091553, 3.326693296432495, 3.3629543781280518, 3.4000632762908936, 3.4476826190948486, 3.4867982864379883, 3.5268514156341553, 3.5678725242614746, 1.6187684535980225, 1.5960289239883423, 1.578755497932434, 1.5668151378631592, 1.5535260438919067, 1.5445846319198608, 1.5377092361450195, 1.529282808303833, 1.5233964920043945, 1.5191774368286133, 1.5140104293823242, 1.509960651397705, 1.507060170173645, 1.5044156312942505, 1.5023592710494995, 1.4998623132705688, 1.499030351638794, 1.4987071752548218, 1.4983614683151245, 1.498131275177002, 1.4988086223602295, 1.500196933746338, 1.501985788345337, 1.5034592151641846, 1.5061843395233154, 1.5093934535980225, 1.5134639739990234, 1.5175999402999878, 1.5223033428192139, 1.5290589332580566, 1.5359050035476685, 1.5423816442489624, 1.5528303384780884, 1.5634328126907349, 1.5750833749771118, 1.591664433479309, 1.6167237758636475, 4.628661632537842, 4.623947620391846, 4.618242263793945, 4.612741947174072, 4.607443332672119, 4.60234260559082, 4.597438335418701, 4.5927252769470215, 4.58820104598999, 4.583861351013184, 4.579704284667969, 4.575725555419922, 4.571922779083252, 4.568292140960693, 4.5648322105407715, 4.561539173126221, 4.557803153991699, 4.554865837097168, 4.552086353302002, 4.549461841583252, 4.546512603759766, 4.544219017028809, 4.5420708656311035, 4.539682388305664, 4.53784704208374, 4.535825729370117, 4.534289360046387, 4.532620429992676, 4.5311384201049805, 4.530041694641113, 4.528890132904053, 4.527912616729736, 4.527229309082031, 4.526562690734863, 4.526059627532959, 4.525717258453369, 4.525530815124512, 4.525497913360596, 3.662233352661133, 3.618893623352051, 3.5945935249328613, 3.5775928497314453, 3.562873363494873, 3.5531115531921387, 3.547882556915283, 3.5434231758117676, 3.542421340942383, 3.5437474250793457, 3.546671152114868, 3.55372953414917, 3.5630593299865723, 3.5746726989746094, 3.5928308963775635, 3.6180334091186523, 3.658557415008545, 4.550806522369385, 4.553635120391846, 4.556586265563965, 4.582988739013672, 4.467458248138428, 4.81257438659668, 4.816547393798828, 4.820143699645996, 4.824385166168213, 4.828207969665527, 4.832700729370117, 4.8373212814331055, 4.8420634269714355, 4.846924304962158, 4.851898670196533, 4.856983184814453, 4.86283016204834, 4.868134021759033, 4.873537063598633, 4.879725933074951, 4.8860297203063965, 4.892441749572754, 4.898228645324707, 4.90557336807251, 4.912283897399902, 4.919084548950195, 4.925971984863281, 4.93372106552124, 4.9407782554626465, 4.948705673217773, 4.956719875335693, 4.964816093444824, 4.972989559173584, 4.982064723968506, 4.990386009216309, 4.999613285064697, 5.008912563323975, 5.017425060272217, 5.027707576751709, 5.037193775177002, 5.0467329025268555, 5.05719518661499, 5.067708969116211, 5.078271389007568, 5.088876724243164, 5.099520206451416, 5.11113977432251, 5.1222100257873535, 5.133670330047607, 5.145538330078125, 5.157829761505127, 5.170563220977783, 5.182638645172119, 5.19511604309082, 5.209205627441406, 5.221340179443359, 5.2351202964782715, 5.249368190765381, 5.262744426727295, 5.27794075012207, 2.9875805377960205, 2.934689998626709, 2.907365322113037, 2.88918137550354, 2.8758037090301514, 2.863698959350586, 2.85599422454834, 2.849242687225342, 2.8449809551239014, 2.8414602279663086, 2.8404929637908936, 2.840765953063965, 2.8425140380859375, 2.846442461013794, 2.8510773181915283, 2.858314275741577, 2.868204355239868, 2.8802597522735596, 2.8961195945739746, 2.9164819717407227, 2.948185443878174, 4.437507152557373, 4.395188808441162, 4.358565330505371, 4.317169189453125, 4.281348705291748, 4.2408671379089355, 4.205836296081543, 4.166260242462158, 4.132023334503174, 4.098149299621582, 4.064636707305908, 4.031479835510254, 3.9986867904663086, 3.9662506580352783, 3.9341697692871094, 3.9069533348083496, 3.875525712966919, 3.844442844390869, 3.818082094192505, 3.787653923034668, 3.761847734451294, 3.7320621013641357, 3.70680570602417, 3.6818034648895264, 3.65295147895813, 3.6284897327423096, 3.6042768955230713, 3.580312967300415, 3.55659818649292, 3.5331308841705322, 3.5099103450775146, 3.486936569213867, 3.4642117023468018, 3.4417307376861572, 3.4231834411621094, 3.4011497497558594, 3.3793582916259766, 3.3613834381103516, 3.3400354385375977, 3.318927049636841, 3.3015241622924805, 3.2808609008789062, 3.263824701309204, 3.2436013221740723, 3.095305919647217, 3.0990231037139893, 3.1203339099884033, 3.1385374069213867, 3.1571550369262695, 3.176201343536377, 3.1996371746063232, 3.2196669578552246, 3.2401654720306396, 3.26114559173584, 3.2826225757598877, 3.2992794513702393, 3.3219165802001953, 3.3763279914855957, 3.360823154449463, 3.3454935550689697, 3.3303382396698, 3.3153574466705322, 3.300551414489746, 3.285919189453125, 3.271461248397827, 3.2600202560424805, 3.245875358581543, 3.2319037914276123, 3.2181057929992676, 3.2071919441223145, 3.1937053203582764, 1.2075124979019165, 1.1755566596984863, 1.153273105621338, 1.1402276754379272, 1.1299946308135986, 1.119502067565918, 1.1114015579223633, 1.1050136089324951, 1.0971425771713257, 1.0927377939224243, 1.0875829458236694, 1.0835119485855103, 1.0784894227981567, 1.074805736541748, 1.071725606918335, 1.0692991018295288, 1.0669057369232178, 1.0639607906341553, 1.0616422891616821, 1.0600227117538452, 1.0589725971221924, 1.0579516887664795, 1.0567165613174438, 1.055761456489563, 1.0548361539840698, 1.0550944805145264, 1.0553523302078247, 1.0556414127349854, 1.056046962738037, 1.056406855583191, 1.056997299194336, 1.0585851669311523, 1.0606248378753662, 1.0623009204864502, 1.0640168190002441, 1.0657730102539062, 1.0689843893051147, 1.07220458984375, 1.0754814147949219, 1.0788155794143677, 1.0822079181671143, 1.0877037048339844, 1.0930571556091309, 1.0985033512115479, 1.104043960571289, 1.1103627681732178, 1.118919849395752, 1.1298636198043823, 1.1396052837371826, 1.154235601425171, 1.1692935228347778, 1.200056791305542, 2.7556354999542236, 2.749924659729004, 2.745466709136963, 2.7411062717437744, 2.7368435859680176, 2.732677698135376, 2.7286086082458496, 2.724635601043701, 2.719804525375366, 2.7160470485687256, 2.7123844623565674, 2.7088160514831543, 2.7053420543670654, 2.7019619941711426, 2.6986749172210693, 2.6946969032287598, 2.691617965698242, 2.6886308193206787, 2.6857357025146484, 2.6829311847686768, 2.6802170276641846, 2.6775927543640137, 2.6744384765625, 2.6720151901245117, 2.669680118560791, 2.667433261871338, 2.665273904800415, 2.662696599960327, 2.6607320308685303, 2.658853530883789, 2.657059907913208, 2.655351161956787, 2.6533336639404297, 2.6518142223358154, 2.6503775119781494, 2.6490232944488525, 2.6474459171295166, 2.646275520324707, 2.645186185836792, 2.644176959991455, 2.6430275440216064, 2.6421966552734375, 2.641444444656372, 2.640770435333252, 2.6400363445281982, 2.6395349502563477, 2.6391100883483887, 2.6386852264404297, 2.6384291648864746, 2.638213872909546, 2.638124465942383, 2.6381077766418457, 2.638188600540161, 2.638333797454834, 2.638615369796753, 2.6389195919036865, 2.6393980979919434, 2.6398589611053467, 2.640530824661255, 2.641144275665283, 2.642005681991577, 2.6427698135375977, 2.643817186355591, 2.644728183746338, 2.6459579467773438, 2.647287130355835, 2.6477911472320557, 2.640227794647217, 2.632840633392334, 2.6270556449890137, 2.6199777126312256, 2.6130669116973877, 2.607656955718994, 2.6010396480560303, 2.594580888748169, 2.588277578353882, 2.582127332687378, 2.576127052307129, 2.57143235206604, 2.565694570541382, 2.5600991249084473, 2.55464243888855, 2.549323081970215, 2.544137716293335, 2.539083957672119, 2.5341591835021973, 2.5293614864349365, 2.5237679481506348, 2.519240617752075, 2.5148322582244873, 2.510540723800659, 2.506364107131958, 2.5015006065368652, 2.497568368911743, 2.493744134902954, 2.4892945289611816, 2.4857006072998047, 2.481520891189575, 2.478147029876709, 2.474226951599121, 2.471064329147339, 2.4673919677734375, 2.4644315242767334, 2.4609968662261963, 2.4576878547668457, 2.454501152038574, 2.451937437057495, 2.448967933654785, 2.446113348007202, 2.4433705806732178, 2.440737247467041, 2.4382104873657227, 2.435788631439209, 2.4334683418273926, 2.4312474727630615, 2.428779125213623, 2.4267659187316895, 2.424844741821289, 2.422717332839966, 2.4209890365600586, 2.4193460941314697, 2.417534828186035, 2.4158341884613037, 2.414462089538574, 2.4129586219787598, 2.41155743598938, 2.410255193710327, 2.4090492725372314, 2.407937526702881, 2.406916379928589, 2.4059841632843018, 2.405137777328491, 2.4043753147125244, 2.403693914413452, 2.4030117988586426, 2.4024972915649414, 2.388782024383545, 2.377889633178711, 2.3847217559814453, 2.39257550239563, 2.4004762172698975, 2.400864601135254, 2.4008772373199463, 2.4009664058685303, 2.4011306762695312, 2.4416444301605225, 2.4497976303100586, 2.459012985229492, 2.467240333557129, 2.4765355587005615, 2.485870599746704, 2.4952428340911865, 2.5046510696411133, 2.5140931606292725, 2.5246224403381348, 0.08361490815877914, 0.10680487751960754, 0.10896056145429611, 0.10995685309171677, 0.11062020063400269, 0.10795984417200089, 0.10858307033777237, 0.10893293470144272, 0.10917962342500687, 0.10945212841033936, 0.10971873253583908, 0.10998471826314926, 0.11025165021419525, 0.11054378747940063, 0.11081235855817795, 0.11110609769821167, 0.1114024892449379, 0.11170021444559097, 0.11199842393398285, 0.11199842393398285};
	
	vector<Cpoint> circles = findCircles(vect);
	
	cout<<"Centers:"<<endl;
	for(Cpoint p:circles){
		cout<<p.x<<" "<<p.y<<endl;
	}
	
	return 0;
}

